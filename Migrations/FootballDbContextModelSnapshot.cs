// <auto-generated />
using System;
using FootballTeamsApp.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FootballTeamsApp.Migrations
{
    [DbContext(typeof(FootballDbContext))]
    partial class FootballDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FootballTeamsApp.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AwayFault")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeFault")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("FootballTeamsApp.Models.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("coach_age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("coach_country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("coach_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("FootballTeamsApp.Models.Goalscorer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AwayAssist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwayScorer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAssist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeScorer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("Score")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScoreInfoTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Goalscorers");
                });

            modelBuilder.Entity("FootballTeamsApp.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AwayScore")
                        .HasColumnType("int");

                    b.Property<string>("AwayTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwayTeamBadge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("int");

                    b.Property<string>("HomeTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTeamBadge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeagueName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchReferee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchStadium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("FootballTeamsApp.Models.MatchStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Away")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Home")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchStatistics");
                });

            modelBuilder.Entity("FootballTeamsApp.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"));

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("player_age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_assists")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_birthdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_blocks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_clearances")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_crosses_total")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_dispossesed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_dribble_attempts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_dribble_succ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_duels_total")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_duels_won")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_fouls_committed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_goals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_goals_conceded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_injured")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_inside_box_saves")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_interceptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_is_captain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("player_key")
                        .HasColumnType("bigint");

                    b.Property<string>("player_key_passes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_match_played")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_passes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_passes_accuracy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_pen_comm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_pen_missed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_pen_scored")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_pen_won")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_rating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_red_cards")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_saves")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_shots_total")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_substitute_out")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_substitutes_on_bench")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_tackles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_woordworks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("player_yellow_cards")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("FootballTeamsApp.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("VenueId")
                        .HasColumnType("int");

                    b.Property<string>("team_badge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("team_country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("team_founded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("team_key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("team_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.HasIndex("VenueId")
                        .IsUnique()
                        .HasFilter("[VenueId] IS NOT NULL");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FootballTeamsApp.Models.TeamStanding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OverallLeagueDraws")
                        .HasColumnType("int")
                        .HasColumnName("Draws");

                    b.Property<int>("OverallLeagueGoalsAgainst")
                        .HasColumnType("int")
                        .HasColumnName("GoalsAgainst");

                    b.Property<int>("OverallLeagueGoalsFor")
                        .HasColumnType("int")
                        .HasColumnName("GoalsFor");

                    b.Property<int>("OverallLeagueLosses")
                        .HasColumnType("int")
                        .HasColumnName("Losses");

                    b.Property<int>("OverallLeaguePlayed")
                        .HasColumnType("int")
                        .HasColumnName("Played");

                    b.Property<int>("OverallLeaguePoints")
                        .HasColumnType("int")
                        .HasColumnName("Points");

                    b.Property<int>("OverallLeaguePosition")
                        .HasColumnType("int")
                        .HasColumnName("Position");

                    b.Property<int>("OverallLeagueWins")
                        .HasColumnType("int")
                        .HasColumnName("Wins");

                    b.Property<string>("OverallPromotion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Promotion");

                    b.Property<string>("TeamBadge")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TeamBadge");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("TeamId");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TeamName");

                    b.HasKey("Id");

                    b.ToTable("TeamStandings");
                });

            modelBuilder.Entity("FootballTeamsApp.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueId"));

                    b.Property<string>("venue_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("venue_capacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("venue_city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("venue_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("venue_surface")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VenueId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("FootballTeamsApp.Models.Card", b =>
                {
                    b.HasOne("FootballTeamsApp.Models.Match", "Match")
                        .WithMany("Cards")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("FootballTeamsApp.Models.Coach", b =>
                {
                    b.HasOne("FootballTeamsApp.Models.Team", "Team")
                        .WithOne("Coach")
                        .HasForeignKey("FootballTeamsApp.Models.Coach", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballTeamsApp.Models.Goalscorer", b =>
                {
                    b.HasOne("FootballTeamsApp.Models.Match", "Match")
                        .WithMany("Goalscorers")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("FootballTeamsApp.Models.Match", b =>
                {
                    b.HasOne("FootballTeamsApp.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballTeamsApp.Models.MatchStatistic", b =>
                {
                    b.HasOne("FootballTeamsApp.Models.Match", "Match")
                        .WithMany("MatchStatistics")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("FootballTeamsApp.Models.Player", b =>
                {
                    b.HasOne("FootballTeamsApp.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballTeamsApp.Models.Team", b =>
                {
                    b.HasOne("FootballTeamsApp.Models.Venue", "Venue")
                        .WithOne()
                        .HasForeignKey("FootballTeamsApp.Models.Team", "VenueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("FootballTeamsApp.Models.Match", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Goalscorers");

                    b.Navigation("MatchStatistics");
                });

            modelBuilder.Entity("FootballTeamsApp.Models.Team", b =>
                {
                    b.Navigation("Coach");

                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
